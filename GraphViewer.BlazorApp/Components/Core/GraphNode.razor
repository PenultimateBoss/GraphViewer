@code
{
    [CascadingParameter] public required BlazorDiagram BlazorDiagram { get; set; }
    [Parameter] public required Model Node { get; set; }
}

<Div Class="graph-node" data-state=@Node.State.ToString()>
    <NodeWidget Node=@Node />
</Div>

@code
{
    [Flags] public enum State
    {
        None = 0,
        PathPart = 1,
        Source = 2,
        Destination = 4,
        Current = 8,
    }
    public sealed partial class Model : NodeModel, IDisposable
    {
        #region Instance
        public State State
        {
            get => field;
            set
            {
                field = value;
                OrderToTitle(this);
            }
        }

        public Model(Point? position = null) : base(position)
        {
            Title = Order.ToString();
            OrderChanged += OrderToTitle;
        }
        public Model(string id, Point? position = null) : base(id, position)
        {
            Title = Order.ToString();
            OrderChanged += OrderToTitle;
        }

        private void OrderToTitle(Blazor.Diagrams.Core.Models.Base.Model? model)
        {
            if((State & State.Source) is not 0)
            {
                Title = $"S[{Order}]";
            }
            else if((State & State.Destination) is not 0)
            {
                Title = $"D[{Order}]";
            }
            else
            {
                Title = Order.ToString();
            }
        }
        #endregion

        #region Base
        public override IShape GetShape()
        {
            return Shapes.Circle(this);
        }
        #endregion
        
        #region IDisposable
        public void Dispose()
        {
            OrderChanged -= OrderToTitle;
        }
        #endregion
    }
}