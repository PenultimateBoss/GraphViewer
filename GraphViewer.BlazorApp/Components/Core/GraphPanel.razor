<svg class="GraphPanel" width="50%" height="100%"
    @ondblclick=@CreateNode @ondblclick:stopPropagation @ondblclick:preventDefault
     @onmousedown=@CancelEdge @onmousedown:stopPropagation @onmousedown:preventDefault
    @onmousemove=@MoveNode @onmousemove:stopPropagation @onmousemove:preventDefault
    @onmouseup=@GraphNodeDragStop @onmouseup:stopPropagation @onmouseup:preventDefault>
    @foreach(NodeEdge.SData edge in Edges)
    {
        <NodeEdge Data=@edge />
    }
    @foreach(LoopEdge.SData loop in Nodes.Where(node => node.LoopEdge is not null).Select(node => node.LoopEdge!))
    {
        <LoopEdge Data=@loop OnDelete=@DeleteLoopEdge />
    }
    @foreach((int index, GraphNode.SData node) in Nodes.Index())
    {
        <GraphNode Data=@node Index=@index OnMouseDown=@GraphNodeDragStart OnDoubleClick=@CreateOrConnectNode NodeStateChanged=@CheckNodesState />
    }
</svg>

@code
{
    private List<GraphNode.SData> Nodes { get; } = [];
    private List<NodeEdge.SData> Edges { get; } = [];
    private GraphNode.SData? DraggingNode { get; set; }
    private NodeEdge.SData? DraggingEdge { get; set; }

    private void CreateNode(MouseEventArgs event_args)
    {
        GraphNode.SData node = new(event_args.OffsetX, event_args.OffsetY);
        node.OnDispose += RemoveNode;
        Nodes.Add(node);

        void RemoveNode(GraphNode.SData node)
        {
            Nodes.Remove(node);
            node.OnDispose -= RemoveNode;
        }
    }
    private void GraphNodeDragStart(GraphNode.SData node)
    {
        DraggingNode = node;
    }
    private void MoveNode(MouseEventArgs event_args)
    {
        if(DraggingNode is not null)
        {
            DraggingNode.X += event_args.MovementX;
            DraggingNode.Y += event_args.MovementY;
        }
        if(DraggingEdge is not null)
        {
            DraggingEdge.EndPoint.X += event_args.MovementX;
            DraggingEdge.EndPoint.Y += event_args.MovementY;
        }
    }
    private void GraphNodeDragStop(MouseEventArgs event_args)
    {
        DraggingNode = null;
    }
    private void CreateOrConnectNode(GraphNode.SData node)
    {
        if(DraggingEdge is null)
        {
            DraggingEdge = NodeEdge.SData.New(node.X, node.Y);
            DraggingEdge.OnDispose += RemoveNodeEdge;
            node.EdgePoints.Add(DraggingEdge.StartPoint);
            Edges.Add(DraggingEdge);

            void RemoveNodeEdge(NodeEdge.SData edge)
            {
                Edges.Remove(edge);
                edge.OnDispose -= RemoveNodeEdge;
            }
        }
        else if(DraggingEdge.StartPoint.X == node.X && DraggingEdge.StartPoint.Y == node.Y)
        {
            DraggingEdge.Dispose();
            node.AddLoopEdge();
        }
        else
        {
            node.AddEdgePoint(DraggingEdge.EndPoint);
            DraggingEdge = null;
        }
    }
    private void DeleteLoopEdge(LoopEdge.SData loop)
    {
        Nodes.FirstOrDefault(node => node.LoopEdge == loop)?.RemoveLoopEdge();
    }
    private void CheckNodesState(GraphNode.SData node)
    {
        if((node.State & GraphNode.NodeState.Source) is not 0)
        {
            foreach(GraphNode.SData data in Nodes.Except([node]))
            {
                data.State &= ~GraphNode.NodeState.Source;
            }
        }
        if((node.State & GraphNode.NodeState.Destination) is not 0)
        {
            foreach(GraphNode.SData data in Nodes.Except([node]))
            {
                data.State &= ~GraphNode.NodeState.Destination;
            }
        }
        if((node.State & GraphNode.NodeState.Current) is not 0)
        {
            foreach(GraphNode.SData data in Nodes.Except([node]))
            {
                data.State &= ~GraphNode.NodeState.Current;
            }
        }
    }
    private void CancelEdge(MouseEventArgs event_args)
    {
        if(event_args.Button is 2 && DraggingEdge is not null)
        {
            DraggingEdge.Dispose();
            DraggingEdge = null;
        }
    }
}